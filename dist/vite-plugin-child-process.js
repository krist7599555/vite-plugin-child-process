import debug from "debug";
import path from "node:path";
import { debounce, filter, interval, map, Observable, startWith, tap, } from "rxjs";
import { $ } from "zx";
export const child_process = (config) => {
    const _command = config.command;
    const _delay = config?.delay ?? 10;
    const _watch = config?.watch.map((w) => typeof w == "string" ? new RegExp(w) : w);
    const log = debug(`vite:child-process:${config.name ?? "untitle"}`);
    log.enabled = config?.log_enable ?? true;
    const log_watcher = log.extend("watcher");
    const old_process = [];
    async function kill_all_process() {
        for (const ps of old_process) {
            await ps.kill();
            await ps.exitCode;
        }
    }
    return {
        name: "vite-plugin-vite-child-process",
        enforce: "post",
        apply: "serve",
        async closeBundle() {
            log_watcher("close bundle");
            await kill_all_process();
        },
        async configureServer({ watcher }) {
            log_watcher("start configure server");
            log_watcher("watcher file change", JSON.stringify(_watch.map((r) => `${r}`)));
            const files = new Observable((o) => {
                watcher.on("ready", () => o.next(""));
                watcher.on("change", (id) => o.next(id));
                watcher.on("add", (id) => o.next(id));
            });
            const filechange$ = files.pipe(filter((id) => _watch.some((regex) => regex.test(id))), map((fullpath) => path.relative(path.resolve(), fullpath)), // change to realtive
            debounce(() => interval(_delay)), tap((id) => log_watcher("filechange " + id)), startWith(null));
            filechange$.subscribe(async () => {
                await kill_all_process();
                const local_process = $ `${_command}`;
                old_process.push(local_process);
                local_process.quiet();
                local_process.stdout.on("data", (s) => log(s.toString().trimEnd()));
                local_process.stdout.on("error", (s) => log(s.toString().trimEnd()));
            });
        },
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidml0ZS1wbHVnaW4tY2hpbGQtcHJvY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi92aXRlLXBsdWdpbi1jaGlsZC1wcm9jZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLElBQUksTUFBTSxXQUFXLENBQUM7QUFFN0IsT0FBTyxFQUNMLFFBQVEsRUFDUixNQUFNLEVBQ04sUUFBUSxFQUNSLEdBQUcsRUFDSCxVQUFVLEVBQ1YsU0FBUyxFQUNULEdBQUcsR0FDSixNQUFNLE1BQU0sQ0FBQztBQUVkLE9BQU8sRUFBdUIsQ0FBQyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBZTVDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLE1BQThCLEVBQVUsRUFBRTtJQUN0RSxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ2hDLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDO0lBQ25DLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDckMsT0FBTyxDQUFDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUN6QyxDQUFDO0lBRUYsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLHNCQUFzQixNQUFNLENBQUMsSUFBSSxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDcEUsR0FBRyxDQUFDLE9BQU8sR0FBRyxNQUFNLEVBQUUsVUFBVSxJQUFJLElBQUksQ0FBQztJQUV6QyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTFDLE1BQU0sV0FBVyxHQUFxQixFQUFFLENBQUM7SUFDekMsS0FBSyxVQUFVLGdCQUFnQjtR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O0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGRlYnVnIGZyb20gXCJkZWJ1Z1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcIm5vZGU6cGF0aFwiO1xuaW1wb3J0IHsgU3RyZWFtIH0gZnJvbSBcIm5vZGU6c3RyZWFtXCI7XG5pbXBvcnQge1xuICBkZWJvdW5jZSxcbiAgZmlsdGVyLFxuICBpbnRlcnZhbCxcbiAgbWFwLFxuICBPYnNlcnZhYmxlLFxuICBzdGFydFdpdGgsXG4gIHRhcCxcbn0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IHR5cGUgUGx1Z2luIH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCB7IHR5cGUgUHJvY2Vzc1Byb21pc2UsICQgfSBmcm9tIFwienhcIjtcblxuZXhwb3J0IGludGVyZmFjZSBWaXRlUGx1Z2luQ2hpbGRQcm9jZXNzIHtcbiAgLyoqIGNvbW1hbmQgbmFtZSBmb3IgcHJlZml4IGxvZyBvdXB1dCBAZGVmYXVsdCBcInVudGl0bGVcIiAqL1xuICBuYW1lPzogc3RyaW5nO1xuICAvKiogY29tbWFuZCB0byBydW4gKi9cbiAgY29tbWFuZDogc3RyaW5nW107XG4gIC8qKiBAZGVmYXVsdCAxMG1zICovXG4gIGRlbGF5PzogbnVtYmVyO1xuICAvKiogdml0ZSB3YXRjaCBmaWxlIGNoYW5nZSAqL1xuICB3YXRjaDogKFJlZ0V4cCB8IHN0cmluZylbXTtcbiAgLyoqIEBkZWZhdWx0IHRydWUgKi9cbiAgbG9nX2VuYWJsZT86IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBjaGlsZF9wcm9jZXNzID0gKGNvbmZpZzogVml0ZVBsdWdpbkNoaWxkUHJvY2Vzcyk6IFBsdWdpbiA9PiB7XG4gIGNvbnN0IF9jb21tYW5kID0gY29uZmlnLmNvbW1hbmQ7XG4gIGNvbnN0IF9kZWxheSA9IGNvbmZpZz8uZGVsYXkgPz8gMTA7XG4gIGNvbnN0IF93YXRjaCA9IGNvbmZpZz8ud2F0Y2gubWFwKCh3KSA9PlxuICAgIHR5cGVvZiB3ID09IFwic3RyaW5nXCIgPyBuZXcgUmVnRXhwKHcpIDogd1xuICApO1xuXG4gIGNvbnN0IGxvZyA9IGRlYnVnKGB2aXRlOmNoaWxkLXByb2Nlc3M6JHtjb25maWcubmFtZSA/PyBcInVudGl0bGVcIn1gKTtcbiAgbG9nLmVuYWJsZWQgPSBjb25maWc/LmxvZ19lbmFibGUgPz8gdHJ1ZTtcblxuICBjb25zdCBsb2dfd2F0Y2hlciA9IGxvZy5leHRlbmQoXCJ3YXRjaGVyXCIpO1xuXG4gIGNvbnN0IG9sZF9wcm9jZXNzOiBQcm9jZXNzUHJvbWlzZVtdID0gW107XG4gIGFzeW5jIGZ1bmN0aW9uIGtpbGxfYWxsX3Byb2Nlc3MoKSB7XG4gICAgZm9yIChjb25zdCBwcyBvZiBvbGRfcHJvY2Vzcykge1xuICAgICAgYXdhaXQgcHMua2lsbCgpO1xuICAgICAgYXdhaXQgcHMuZXhpdENvZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBcInZpdGUtcGx1Z2luLXZpdGUtY2hpbGQtcHJvY2Vzc1wiLFxuICAgIGVuZm9yY2U6IFwicG9zdFwiLFxuICAgIGFwcGx5OiBcInNlcnZlXCIsXG4gICAgYXN5bmMgY2xvc2VCdW5kbGUoKSB7XG4gICAgICBsb2dfd2F0Y2hlcihcImNsb3NlIGJ1bmRsZVwiKTtcbiAgICAgIGF3YWl0IGtpbGxfYWxsX3Byb2Nlc3MoKTtcbiAgICB9LFxuICAgIGFzeW5jIGNvbmZpZ3VyZVNlcnZlcih7IHdhdGNoZXIgfSkge1xuICAgICAgbG9nX3dhdGNoZXIoXCJzdGFydCBjb25maWd1cmUgc2VydmVyXCIpO1xuICAgICAgbG9nX3dhdGNoZXIoXG4gICAgICAgIFwid2F0Y2hlciBmaWxlIGNoYW5nZVwiLFxuICAgICAgICBKU09OLnN0cmluZ2lmeShfd2F0Y2gubWFwKChyKSA9PiBgJHtyfWApKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IGZpbGVzID0gbmV3IE9ic2VydmFibGU8c3RyaW5nPigobykgPT4ge1xuICAgICAgICB3YXRjaGVyLm9uKFwicmVhZHlcIiwgKCkgPT4gby5uZXh0KFwiXCIpKTtcbiAgICAgICAgd2F0Y2hlci5vbihcImNoYW5nZVwiLCAoaWQpID0+IG8ubmV4dChpZCkpO1xuICAgICAgICB3YXRjaGVyLm9uKFwiYWRkXCIsIChpZCkgPT4gby5uZXh0KGlkKSk7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZmlsZWNoYW5nZSQgPSBmaWxlcy5waXBlKFxuICAgICAgICBmaWx0ZXIoKGlkKSA9PiBfd2F0Y2guc29tZSgocmVnZXgpID0+IHJlZ2V4LnRlc3QoaWQpKSksXG4gICAgICAgIG1hcCgoZnVsbHBhdGgpID0+IHBhdGgucmVsYXRpdmUocGF0aC5yZXNvbHZlKCksIGZ1bGxwYXRoKSksIC8vIGNoYW5nZSB0byByZWFsdGl2ZVxuICAgICAgICBkZWJvdW5jZSgoKSA9PiBpbnRlcnZhbChfZGVsYXkpKSxcbiAgICAgICAgdGFwKChpZCkgPT4gbG9nX3dhdGNoZXIoXCJmaWxlY2hhbmdlIFwiICsgaWQpKSxcbiAgICAgICAgc3RhcnRXaXRoKG51bGwpXG4gICAgICApO1xuXG4gICAgICBmaWxlY2hhbmdlJC5zdWJzY3JpYmUoYXN5bmMgKCkgPT4ge1xuICAgICAgICBhd2FpdCBraWxsX2FsbF9wcm9jZXNzKCk7XG4gICAgICAgIGNvbnN0IGxvY2FsX3Byb2Nlc3M6IFByb2Nlc3NQcm9taXNlID0gJGAke19jb21tYW5kfWA7XG4gICAgICAgIG9sZF9wcm9jZXNzLnB1c2gobG9jYWxfcHJvY2Vzcyk7XG4gICAgICAgIGxvY2FsX3Byb2Nlc3MucXVpZXQoKTtcblxuICAgICAgICBsb2NhbF9wcm9jZXNzLnN0ZG91dC5vbihcImRhdGFcIiwgKHM6IFN0cmVhbSkgPT5cbiAgICAgICAgICBsb2cocy50b1N0cmluZygpLnRyaW1FbmQoKSlcbiAgICAgICAgKTtcbiAgICAgICAgbG9jYWxfcHJvY2Vzcy5zdGRvdXQub24oXCJlcnJvclwiLCAoczogU3RyZWFtKSA9PlxuICAgICAgICAgIGxvZyhzLnRvU3RyaW5nKCkudHJpbUVuZCgpKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSxcbiAgfTtcbn07XG4iXX0=