import debug from "debug";
import path from "node:path";
import { debounce, filter, interval, map, Observable, startWith, tap, } from "rxjs";
import { $ } from "zx";
export const child_process = (config) => {
    const _command = config.command;
    const _delay = config?.delay ?? 10;
    const _watch = config?.watch.map((w) => typeof w == "string" ? new RegExp(w) : w);
    const log = debug(`vite:child-process:${config.name ?? "untitle"}`);
    log.enabled = config?.log_enable ?? true;
    const log_watcher = log.extend("watcher");
    const old_process = [];
    async function kill_all_process() {
        for (const ps of old_process) {
            await ps.kill();
            await ps.exitCode;
        }
    }
    return {
        name: "vite-plugin-vite-child-process",
        enforce: "post",
        apply: "serve",
        async closeBundle() {
            log_watcher("close bundle");
            await kill_all_process();
        },
        async configureServer({ watcher }) {
            log_watcher("start configure server");
            log_watcher("watcher file change", JSON.stringify(_watch.map((r) => `${r}`)));
            const files = new Observable((o) => {
                watcher.on("ready", () => o.next(""));
                watcher.on("change", (id) => o.next(id));
                watcher.on("add", (id) => o.next(id));
            });
            const filechange$ = files.pipe(filter((id) => _watch.some((regex) => regex.test(id))), map((fullpath) => path.relative(path.resolve(), fullpath)), // change to realtive
            debounce(() => interval(_delay)), tap((id) => log_watcher("filechange " + id)), startWith(null));
            filechange$.subscribe(async () => {
                await kill_all_process();
                const local_process = $ `${_command}`;
                old_process.push(local_process);
                local_process.quiet();
                local_process.stderr.on("data", (s) => log(s.toString().trimEnd()));
                local_process.stderr.on("error", (s) => log(s.toString().trimEnd()));
                local_process.stdout.on("data", (s) => log(s.toString().trimEnd()));
                local_process.stdout.on("error", (s) => log(s.toString().trimEnd()));
            });
        },
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidml0ZS1wbHVnaW4tY2hpbGQtcHJvY2Vzcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL2xpYi92aXRlLXBsdWdpbi1jaGlsZC1wcm9jZXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUMxQixPQUFPLElBQUksTUFBTSxXQUFXLENBQUM7QUFFN0IsT0FBTyxFQUNMLFFBQVEsRUFDUixNQUFNLEVBQ04sUUFBUSxFQUNSLEdBQUcsRUFDSCxVQUFVLEVBQ1YsU0FBUyxFQUNULEdBQUcsR0FDSixNQUFNLE1BQU0sQ0FBQztBQUVkLE9BQU8sRUFBdUIsQ0FBQyxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBZTVDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLE1BQThCLEVBQVUsRUFBRTtJQUN0RSxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ2hDLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxLQUFLLElBQUksRUFBRSxDQUFDO0lBQ25DLE1BQU0sTUFBTSxHQUFHLE1BQU0sRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDckMsT0FBTyxDQUFDLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUN6QyxDQUFDO0lBRUYsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLHNCQUFzQixNQUFNLENBQUMsSUFBSSxJQUFJLFNBQVMsRUFBRSxDQUFDLENBQUM7SUFDcEUsR0FBRyxDQUFDLE9BQU8sR0FBRyxNQUFNLEVBQUUsVUFBVSxJQUFJLElBQUksQ0FBQztJQUV6QyxNQUFNLFdBQVcsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTFDLE1BQU0sV0FBVyxHQUFxQixFQUFFLENBQUM7SUFDekMsS0FBSyxVQUFVLGdCQUFnQjtR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TSxFQUFFLENBQUMsQ0FBUyxFQUFFLEVBQUUsQ0FDNUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUM1QixDQUFDO2dCQUNGLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQVMsRUFBRSxFQUFFLENBQzdDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FDNUIsQ0FBQztZQUNKLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQztLQUNGLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVidWcgZnJvbSBcImRlYnVnXCI7XG5pbXBvcnQgcGF0aCBmcm9tIFwibm9kZTpwYXRoXCI7XG5pbXBvcnQgeyBTdHJlYW0gfSBmcm9tIFwibm9kZTpzdHJlYW1cIjtcbmltcG9ydCB7XG4gIGRlYm91bmNlLFxuICBmaWx0ZXIsXG4gIGludGVydmFsLFxuICBtYXAsXG4gIE9ic2VydmFibGUsXG4gIHN0YXJ0V2l0aCxcbiAgdGFwLFxufSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgdHlwZSBQbHVnaW4gfSBmcm9tIFwidml0ZVwiO1xuaW1wb3J0IHsgdHlwZSBQcm9jZXNzUHJvbWlzZSwgJCB9IGZyb20gXCJ6eFwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZpdGVQbHVnaW5DaGlsZFByb2Nlc3Mge1xuICAvKiogY29tbWFuZCBuYW1lIGZvciBwcmVmaXggbG9nIG91cHV0IEBkZWZhdWx0IFwidW50aXRsZVwiICovXG4gIG5hbWU/OiBzdHJpbmc7XG4gIC8qKiBjb21tYW5kIHRvIHJ1biAqL1xuICBjb21tYW5kOiBzdHJpbmdbXTtcbiAgLyoqIEBkZWZhdWx0IDEwbXMgKi9cbiAgZGVsYXk/OiBudW1iZXI7XG4gIC8qKiB2aXRlIHdhdGNoIGZpbGUgY2hhbmdlICovXG4gIHdhdGNoOiAoUmVnRXhwIHwgc3RyaW5nKVtdO1xuICAvKiogQGRlZmF1bHQgdHJ1ZSAqL1xuICBsb2dfZW5hYmxlPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IGNoaWxkX3Byb2Nlc3MgPSAoY29uZmlnOiBWaXRlUGx1Z2luQ2hpbGRQcm9jZXNzKTogUGx1Z2luID0+IHtcbiAgY29uc3QgX2NvbW1hbmQgPSBjb25maWcuY29tbWFuZDtcbiAgY29uc3QgX2RlbGF5ID0gY29uZmlnPy5kZWxheSA/PyAxMDtcbiAgY29uc3QgX3dhdGNoID0gY29uZmlnPy53YXRjaC5tYXAoKHcpID0+XG4gICAgdHlwZW9mIHcgPT0gXCJzdHJpbmdcIiA/IG5ldyBSZWdFeHAodykgOiB3XG4gICk7XG5cbiAgY29uc3QgbG9nID0gZGVidWcoYHZpdGU6Y2hpbGQtcHJvY2Vzczoke2NvbmZpZy5uYW1lID8/IFwidW50aXRsZVwifWApO1xuICBsb2cuZW5hYmxlZCA9IGNvbmZpZz8ubG9nX2VuYWJsZSA/PyB0cnVlO1xuXG4gIGNvbnN0IGxvZ193YXRjaGVyID0gbG9nLmV4dGVuZChcIndhdGNoZXJcIik7XG5cbiAgY29uc3Qgb2xkX3Byb2Nlc3M6IFByb2Nlc3NQcm9taXNlW10gPSBbXTtcbiAgYXN5bmMgZnVuY3Rpb24ga2lsbF9hbGxfcHJvY2VzcygpIHtcbiAgICBmb3IgKGNvbnN0IHBzIG9mIG9sZF9wcm9jZXNzKSB7XG4gICAgICBhd2FpdCBwcy5raWxsKCk7XG4gICAgICBhd2FpdCBwcy5leGl0Q29kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5hbWU6IFwidml0ZS1wbHVnaW4tdml0ZS1jaGlsZC1wcm9jZXNzXCIsXG4gICAgZW5mb3JjZTogXCJwb3N0XCIsXG4gICAgYXBwbHk6IFwic2VydmVcIixcbiAgICBhc3luYyBjbG9zZUJ1bmRsZSgpIHtcbiAgICAgIGxvZ193YXRjaGVyKFwiY2xvc2UgYnVuZGxlXCIpO1xuICAgICAgYXdhaXQga2lsbF9hbGxfcHJvY2VzcygpO1xuICAgIH0sXG4gICAgYXN5bmMgY29uZmlndXJlU2VydmVyKHsgd2F0Y2hlciB9KSB7XG4gICAgICBsb2dfd2F0Y2hlcihcInN0YXJ0IGNvbmZpZ3VyZSBzZXJ2ZXJcIik7XG4gICAgICBsb2dfd2F0Y2hlcihcbiAgICAgICAgXCJ3YXRjaGVyIGZpbGUgY2hhbmdlXCIsXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KF93YXRjaC5tYXAoKHIpID0+IGAke3J9YCkpXG4gICAgICApO1xuICAgICAgY29uc3QgZmlsZXMgPSBuZXcgT2JzZXJ2YWJsZTxzdHJpbmc+KChvKSA9PiB7XG4gICAgICAgIHdhdGNoZXIub24oXCJyZWFkeVwiLCAoKSA9PiBvLm5leHQoXCJcIikpO1xuICAgICAgICB3YXRjaGVyLm9uKFwiY2hhbmdlXCIsIChpZCkgPT4gby5uZXh0KGlkKSk7XG4gICAgICAgIHdhdGNoZXIub24oXCJhZGRcIiwgKGlkKSA9PiBvLm5leHQoaWQpKTtcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBmaWxlY2hhbmdlJCA9IGZpbGVzLnBpcGUoXG4gICAgICAgIGZpbHRlcigoaWQpID0+IF93YXRjaC5zb21lKChyZWdleCkgPT4gcmVnZXgudGVzdChpZCkpKSxcbiAgICAgICAgbWFwKChmdWxscGF0aCkgPT4gcGF0aC5yZWxhdGl2ZShwYXRoLnJlc29sdmUoKSwgZnVsbHBhdGgpKSwgLy8gY2hhbmdlIHRvIHJlYWx0aXZlXG4gICAgICAgIGRlYm91bmNlKCgpID0+IGludGVydmFsKF9kZWxheSkpLFxuICAgICAgICB0YXAoKGlkKSA9PiBsb2dfd2F0Y2hlcihcImZpbGVjaGFuZ2UgXCIgKyBpZCkpLFxuICAgICAgICBzdGFydFdpdGgobnVsbClcbiAgICAgICk7XG5cbiAgICAgIGZpbGVjaGFuZ2UkLnN1YnNjcmliZShhc3luYyAoKSA9PiB7XG4gICAgICAgIGF3YWl0IGtpbGxfYWxsX3Byb2Nlc3MoKTtcbiAgICAgICAgY29uc3QgbG9jYWxfcHJvY2VzczogUHJvY2Vzc1Byb21pc2UgPSAkYCR7X2NvbW1hbmR9YDtcbiAgICAgICAgb2xkX3Byb2Nlc3MucHVzaChsb2NhbF9wcm9jZXNzKTtcbiAgICAgICAgbG9jYWxfcHJvY2Vzcy5xdWlldCgpO1xuXG4gICAgICAgIGxvY2FsX3Byb2Nlc3Muc3RkZXJyLm9uKFwiZGF0YVwiLCAoczogU3RyZWFtKSA9PlxuICAgICAgICAgIGxvZyhzLnRvU3RyaW5nKCkudHJpbUVuZCgpKVxuICAgICAgICApO1xuICAgICAgICBsb2NhbF9wcm9jZXNzLnN0ZGVyci5vbihcImVycm9yXCIsIChzOiBTdHJlYW0pID0+XG4gICAgICAgICAgbG9nKHMudG9TdHJpbmcoKS50cmltRW5kKCkpXG4gICAgICAgICk7XG4gICAgICAgIGxvY2FsX3Byb2Nlc3Muc3Rkb3V0Lm9uKFwiZGF0YVwiLCAoczogU3RyZWFtKSA9PlxuICAgICAgICAgIGxvZyhzLnRvU3RyaW5nKCkudHJpbUVuZCgpKVxuICAgICAgICApO1xuICAgICAgICBsb2NhbF9wcm9jZXNzLnN0ZG91dC5vbihcImVycm9yXCIsIChzOiBTdHJlYW0pID0+XG4gICAgICAgICAgbG9nKHMudG9TdHJpbmcoKS50cmltRW5kKCkpXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufTtcbiJdfQ==